/*
 *  test_random_convergent_connect.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/* BeginDocumentation
   Name: testsuite::test_random_convergent_connect - sli script to test the RandomConvergentConnect function using global rng.

   Synopsis: (test_random_convergent_connect) run -> compare response with reference data

   Description: Tests the use of the RandomConvergentConnect function by 
   creating a single one-to-many connection with this function. The test
   script confirms that the function creates the right number of connections
   and that the connections are in the list of possible connections. The
   actual distribution of the connections is not tested.

   Author: Moritz Helias (based on Potjans and Eppler)
   SeeAlso: testsuite::test_random_divergent_connect
 */

(unittest) run
/unittest using

is_threaded_with_openmp not { exit_test_gracefully } if


% Initialise variables
0.1 /h Set
0.1 /c Set
100 /num_neur Set

1.234 /w Set % synaptic weight
2.3 /d Set % synaptic delay

% Decide the number of nodes to connect to.
c num_neur mul cvi /n Set


/prepare_nodes
{
    ResetKernel

    % Set settings for root network. These
    % settings could be changed to test different
    % aspects of simulation.
    0 <<
      /local_num_threads 2
      /resolution h
    >> SetStatus

    % Create some target neurons.
    /P1_from 0 GetStatus /network_size get def
    /P1_to /iaf_psc_delta num_neur Create def

    /P2_from 0 GetStatus /network_size get def
    /P2_to /iaf_psc_delta num_neur Create def
} def

/count_num_connections
{
    << >> begin
    /target Set
    << /target [target] >> GetConnections
    length
    end
}
def

/check_param
{
    << >> begin
    
    /value Set /param Set

    <<   >> GetConnections    
    { param get } Map
    6 ToUnitTestPrecision
    dup length /l Set
    [l] value LayoutArray
    eq assert_or_die

    end
}
def



% Test1: check RandomConvergentConnect with single target neuron

% resets kernel, defines P1_from, P1_to, P2_from, P2_to
prepare_nodes
/static_synapse << /weight w /delay d >> SetDefaults

[P1_from P1_to] Range [P2_from] n RandomConvergentConnect

% check number of incoming connections for neuron

(test1.1) ==
P2_from
count_num_connections n eq assert_or_die


(test1.2) ==
% check synaptic weight
/weight w 
check_param

(test1.3) ==
% check synaptic delays
/delay d 
check_param






% Test2: check RandomConvergentConnect with target population

% resets kernel, defines P1_from, P1_to, P2_from, P2_to
prepare_nodes
/static_synapse << /weight w /delay d >> SetDefaults

[P1_from P1_to] Range [P2_from P2_to] Range n RandomConvergentConnect

% check number of incoming connections for neuron
(test2.1) ==
[P2_from P2_to] Range
{
  count_num_connections n eq assert_or_die
}
forall

% check synaptic weight
(test2.2) ==
/weight w 
check_param

% check synaptic delays
(test2.3) ==
/delay d 
check_param



endusing